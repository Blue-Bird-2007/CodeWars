Problem
If n is the numerator and d the denominator of a fraction, then that fraction is defined 
as a (reduced) proper fraction if and only if GCD(n,d)==1. For example, 5/16 is a proper fraction, while 6/16 is not, 
as both 6 and 16 are divisible by 2, thus the fraction can be reduced to 3/8.
Now, if you consider a given number d, how many proper fractions can be built using d as a denominator?
For example, let's assume that d is 15: you can build a total of 8 different proper fractions between 0 and 1 with it: 
1/15, 2/15, 4/15, 7/15, 8/15, 11/15, 13/15 and 14/15.
You are to build a function that computes how many proper fractions you can build with a given denominator.

Python Code
def proper_fractions(n):
  distinct_prime_factors = set()
  totient_function = n
  if n == 1:
    totient_function = 0
  else:
    i = 2
    while i*i <= n:
      if n%i == 0:
        distinct_prime_factors.add(i)
        n = n/i 
      else:
        i += 1
    if n > 1:
      distinct_prime_factors.add(n)  
    if len(distinct_prime_factors) == 0:
        totient_function = n - 1
    else:
      for p in distinct_prime_factors:
        totient_function = totient_function*(p - 1)/p
  return totient_function
